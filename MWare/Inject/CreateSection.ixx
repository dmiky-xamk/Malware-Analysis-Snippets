module;
#include <Windows.h>
#include <iostream>

#include "../../Classes/Process.h"
#include "../../Headers/ntdll.h"
#pragma comment(lib, "ntdll.lib")

import Exception;

export module CreateSection;

export namespace MW::Inject
{
    namespace
    {
        bool CreateSection(const Process &proc)
        {
            HANDLE sHandle{ NULL };
            SIZE_T size{ 4096 };
            LARGE_INTEGER sectionSize{ size };
            PVOID localSectionAddress{ NULL };
            PVOID remoteSectionAddress{ NULL };

            // Luodaan section paikalliseen prosessiin
            NtCreateSection(
                &sHandle,
                SECTION_MAP_READ | SECTION_MAP_WRITE | SECTION_MAP_EXECUTE,
                NULL,
                reinterpret_cast<PLARGE_INTEGER>(&sectionSize),
                PAGE_EXECUTE_READWRITE,
                SEC_COMMIT,
                NULL
            );

            if (!sHandle)
            {
                throw Exception("NtCreateSection returned NULL", "CreateSection");
            }

            std::cout << "Section handle: " << sHandle << '\n';

            // Luodaan section view paikallisen prosessin sectioniin
            NtMapViewOfSection(
                sHandle,
                GetCurrentProcess(),
                &localSectionAddress,
                NULL,
                NULL,
                NULL,
                &size,
                ViewUnmap,
                NULL,
                PAGE_READWRITE
            );

            // Luodaan toiseen prosessiin section view ylempänä luotuun sectioniin
            NtMapViewOfSection(
                sHandle,
                proc.getProcHandle(),
                &remoteSectionAddress,
                NULL,
                NULL,
                NULL,
                &size,
                ViewUnmap,
                NULL,
                PAGE_READWRITE
            );

            std::cout << "RemoteSelectionAddress: " << remoteSectionAddress << '\n';

            getchar();

            std::cout << "Proceeding with memcpy...\n";
            const std::string str{ "MALWARE ANALYSIS" };

            // Copy the content to a local view, which gets reflected in the remote view
            int memcpyErr{ memcpy_s(localSectionAddress, size, &str[0], str.length()) };

            // 0 if succeeded
            if (memcpyErr)
            {
                throw Exception("Memcpy_s returned an error", "CreateSection");
            }

            if (sHandle)
            {
                //NtClose(sHandle);
                NtClose(sHandle);
            }

            return true;
        }
    }

    // Luo section paikalliseen prosessiin -> luo näkymä paikalliseen sekä ulkoiseen prosessiin -> kopioi koodia paikalliseen näkymään -> koodi heijastuu ulkoisen prosessin näkymässä
    void CodeInjectionSection(const Process &proc)
    {
        // Resolve imports dynamically for section view usage
        //ResolveImports();

        // Create section in local process -> create section views in local and remote processes -> copy code in local view -> gets reflected in remote view
        CreateSection(proc);
    }

}