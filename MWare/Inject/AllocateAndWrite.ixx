module;
#include <Windows.h>
#include <iostream>

#include "../../Classes/Process.h"

import Exception;

export module AllocateAndWrite;

export namespace MW::Inject
{
    namespace
    {
        LPVOID AllocateMemory(const Process &proc, SIZE_T size = 4000)
        {
            // Allocate memory inside the remote process
            const LPVOID allocatedAddress{ VirtualAllocEx(proc.getProcHandle(), NULL, size, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE) };

            if (!allocatedAddress)
            {
                throw Exception("Failed to allocate memory", "AllocateMemory");
            }

            std::cout << "Memory amount of " << size << " was allocated at " << allocatedAddress << '\n';

            return allocatedAddress;
        }

        bool WriteIntoMemory(LPVOID address, const Process &proc)
        {
            const std::string str{ "MALWARE ANALYSIS " };

            SIZE_T numOfBytesWritten;
            std::cout << "Buffer length: " << str.length() << '\n';
            std::cout << "Buffer: " << str << '\n';

            const BOOL writeSuccess{ WriteProcessMemory(proc.getProcHandle(), address, &str[0], str.length(), &numOfBytesWritten)};

            if (!writeSuccess)
            {
                throw Exception("WriteProcessMemory returned FALSE", "WriteIntoMemory");
            }

            std::cout << "WriteIntoMemory succeeded and wrote " << numOfBytesWritten << " bytes into memory.\n";

            return true;
        }
    }

    // Löydä prosessin ID -> Varaa prosessista tilaa -> Kirjoita prosessin muistiin
    LPVOID AllocateAndWriteMemory(const Process &proc)
    {
        // Allocate memory in the target process (OpenProcess, VirtualAllocEx)
        const LPVOID allocatedAddr{ AllocateMemory(proc) };

        // Writing into remote target memory (WriteProcessMemory)
        WriteIntoMemory(allocatedAddr, proc);

        return allocatedAddr;
    }
}