module;
#include <Windows.h>
#include "../../Classes/Process.h"


import Exception;

export module AlterThreadContext;

export namespace MW::Execute
{
    bool AlterThreadContext(LPVOID allocatedAddr, const Process &proc)
    {
        //LPCONTEXT threadContext = new CONTEXT();
        //threadContext->ContextFlags = CONTEXT_INTEGER;

        CONTEXT threadContext;
        threadContext.ContextFlags = CONTEXT_FULL;

        // Thread jonka contextia muutetaan täytyy suspendata ensin (EIP sijaitsee contextissa)
        const DWORD suspendSucceed{ SuspendThread(proc.getThreadHandle()) };

        if (!suspendSucceed)
        {
            throw Exception("SuspendThread failed", "AlterThreadContext");
        }

        BOOL contextReceived{ GetThreadContext(proc.getThreadHandle(), &threadContext) };

        if (!contextReceived)
        {
            throw Exception("GetThreadContext failed", "AlterThreadContext");
        }

        threadContext.Eip = (DWORD_PTR)allocatedAddr;

        SetThreadContext(proc.getThreadHandle(), &threadContext);

        ResumeThread(proc.getThreadHandle());
    }
}
