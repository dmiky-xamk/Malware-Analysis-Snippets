module;

#include <Windows.h>
#include <TlHelp32.h>
#include <iostream>
import Exception;

export module GetProcessThreadID;

export namespace MW::Get
{
    DWORD GetProcessThreadID(DWORD procID)
    {
        THREADENTRY32 threadEntry{ sizeof(THREADENTRY32) };
        DWORD threadID{ NULL };
        HANDLE hSnapshot{};

        hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, procID);

        if (hSnapshot == INVALID_HANDLE_VALUE)
        {
            throw Exception("hSnapshot was INVALID_HANDLE_VALUE.", "GetProcessThreadID");
        }

        if (!Thread32First(hSnapshot, &threadEntry))
        {
            CloseHandle(hSnapshot);
            throw Exception("Thread32First was FALSE.", "GetProcessThreadID");
        }

        do
        {
            if (threadEntry.th32OwnerProcessID == procID)
            {
                threadID = threadEntry.th32ThreadID;
            }

        } while (Thread32Next(hSnapshot, &threadEntry));

        if (!threadID)
        {
            CloseHandle(hSnapshot);
            throw Exception("No threads were found", "GetProcessThreadID");
        }

        std::cout << "Thread ID " << threadID << " found succesfully.\n";

        return threadID;
    }
}