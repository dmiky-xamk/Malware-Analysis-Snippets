module;

#include <Windows.h>
#include <TlHelp32.h>
#include <iostream>

import Helpers;
import Exception;
export module GetProcessID;

export namespace MW::Get
{
    DWORD GetProcessID()
    {
        HANDLE hSnapshot{};
        PROCESSENTRY32 pe32{};
        DWORD procID{};
        //const std::string procNameToFind{ "notepad.exe" };
        std::string procNameToFind = "notepad.exe";

        // Palauttaa 'kuvan' kaikista j‰rjestelm‰ss‰ t‰ll‰ hetkell‰ p‰‰ll‰ olevista prosesseista.
        hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

        if (hSnapshot == INVALID_HANDLE_VALUE)
        {
            throw Exception("hSnapshot was INVALID_HANDLE_VALUE.", "GetProcess");
        }

        pe32.dwSize = sizeof(PROCESSENTRY32);

        if (!Process32FirstW(hSnapshot, &pe32))
        {
            CloseHandle(hSnapshot);
            throw Exception("Process32First was FALSE. Excepted TRUE.", "GetProcess");
        }

        // Loop all the processes
        do
        {
            const std::wstring exeFileName{ pe32.szExeFile };

            const std::string procName{ Helpers::WStringToString(exeFileName) };

            if (procName == procNameToFind)
            {
                std::cout << "Process found: " << procName << '\n';
                procID = pe32.th32ProcessID;
                break;
            }

        } while (Process32NextW(hSnapshot, &pe32));

        if (hSnapshot)
        {
            CloseHandle(hSnapshot);
        }

        if (!procID)
        {
            throw Exception("The process named " + procNameToFind + " was not found.", "GetProcess");
        }

        return procID;
    }
}