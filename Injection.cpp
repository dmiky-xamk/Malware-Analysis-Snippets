#include <iostream>
#include <Windows.h>
#include "Classes/Process.h"

import Exception;
import GetProcessID;
import GetProcessThreadID;
import AllocateAndWrite;

int main()
{
    try
    {
        // Get the process ID to inject code into (CreateTool32HelpSnapshot, Process32First, Process32Next)
        const DWORD procID{ MW::Get::GetProcessID() };

        // Get a thread ID for APC Queue Code Injection (notepad only has a single thread)
        const DWORD threadID{ MW::Get::GetProcessThreadID(procID) };

        // Create a class instance to preserve and close the handle automatically
        const Process process{ Process(procID, threadID) };

        // === USING SECTIONS TO INJECT ===
        // CodeInjectionSection(process);

        // === USING VirtualAllocEx & WriteProcessMemory TO INJECT ===
        //const LPVOID allocatedAddr{ MW::Inject::AllocateAndWriteMemory(process) };

        // === INJECT DLL ===
        // CodeInjectionDLL(process);

         // === EXECUTE INJECTED CODE === (CreateRemoteThread, QueueUserAPC, AlterThreadContext...)
        //ExecuteInjectedCode(allocatedAddr, process);

    }

    catch (const Exception &e)
    {
        std::cout << e.getErrorInfo();
    }

    return 0;

}

