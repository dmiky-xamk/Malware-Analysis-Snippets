#include "Process.h"

import Exception;

Process::Process(DWORD procID)
{
    // Open a handle to the prcess with all priviledges, including debug
    hProc = OpenProcess(PROCESS_ALL_ACCESS, TRUE, procID);

    if (!hProc)
    {
        throw Exception("OpenProcess returned NULL", "Process Constructor");
    }
}

Process::Process(DWORD procID, DWORD threadID)
    : Process(procID)
{
    hThread = OpenThread(THREAD_ALL_ACCESS, TRUE, threadID);

    if (!hThread)
    {
        throw Exception("OpenThread returned NULL", "Process Constructor");
    }
}

// Destructor closes the handles automatically
Process::~Process()
{
    if (hProc) CloseHandle(hProc);
    if (hThread) CloseHandle(hThread);
}

HANDLE Process::getProcHandle() const
{
    return hProc;
}

HANDLE Process::getThreadHandle() const
{
    return hThread;
}
